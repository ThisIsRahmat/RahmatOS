---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
---

<Layout title="Rahmat Junaid - AI Engineer & Technologist">
	<Navigation />
	
	<!-- Hero Section -->
	<section id="home" class="pt-28 md:pt-32 pb-14 md:pb-16 flex-grow">
		<div>
			<!-- Introduction -->
			<p class="text-gray-800 leading-relaxed font-medium">
				I'm Rahmat Junaid, an AI engineer and technologist based in the UK.
			</p>
			<p class="mt-3 md:mt-4 text-gray-700 leading-relaxed font-medium">
				Currently exploring and hacking on AI products, particularly around voice agents and conversational AI. Previously, I built LLM-powered tools at Capgemini and kept platforms running at Fly.io (YC W20), and taught web development to career switchers.
			</p>
			<p class="mt-4 md:mt-8 text-gray-700 leading-relaxed font-medium">
				I'm pursuing my MSc in Artificial Intelligence at the University of Nottingham.
			</p>
		</div>
	</section>

	<!-- To-do: Add a project section with the projects that I am working on  -->

	<!-- Projects Section -->
	<!-- <section class="pb-14 md:pb-16">
		<div>
			<h2 class="text-xl md:text-2xl font-semibold text-gray-900">Featured Projects</h2>
			<p class="mt-3 text-gray-600 leading-relaxed">
				A selection of projects I'm currently working on or have recently completed.
			</p>
			
			<div class="mt-8 grid gap-6 md:grid-cols-2">
				<div class="border border-gray-200 rounded-lg p-6 hover:border-gray-300 transition-colors">
					<h3 class="text-lg font-medium text-gray-900">AI Voice Agent Platform</h3>
					<p class="mt-2 text-gray-600 text-sm leading-relaxed">
						Building conversational AI agents with natural voice interfaces for customer service applications.
					</p>
					<div class="mt-4 flex flex-wrap gap-2">
						<span class="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded">Python</span>
						<span class="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded">LLMs</span>
						<span class="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded">Voice AI</span>
					</div>
				</div>
				
				<div class="border border-gray-200 rounded-lg p-6 hover:border-gray-300 transition-colors">
					<h3 class="text-lg font-medium text-gray-900">LLM-Powered Development Tools</h3>
					<p class="mt-2 text-gray-600 text-sm leading-relaxed">
						Developer productivity tools leveraging large language models for code generation and analysis.
					</p>
					<div class="mt-4 flex flex-wrap gap-2">
						<span class="px-2 py-1 text-xs bg-green-100 text-green-700 rounded">TypeScript</span>
						<span class="px-2 py-1 text-xs bg-green-100 text-green-700 rounded">Node.js</span>
						<span class="px-2 py-1 text-xs bg-green-100 text-green-700 rounded">AI</span>
					</div>
				</div>
			</div>
			
			<div class="mt-6">
				<a href="/projects" class="text-blue-600 hover:text-blue-700 font-medium text-sm">
					View all projects â†’
				</a>
			</div>
		</div>
	</section> -->

	<!-- Currently Reading Section -->
	<section class="pb-14 md:pb-16">
		<div>
			<h2 class="text-lg font-medium text-gray-900 mb-4">Currently Reading</h2>

			<div id="currently-reading-container">
				<div class="text-center py-8">
					<p class="text-gray-500">Loading...</p>
				</div>
			</div>

			<div class="mt-6">
				<a href="/books" class="text-blue-600 hover:text-blue-700 font-medium text-sm">
					View all books â†’
				</a>
			</div>
		</div>
	</section>

	<script>
		const CACHE_KEY = 'literal-currently-reading';
		const CACHE_DURATION = 10 * 60 * 1000; // 10 minutes

		function renderBooks(currentlyReading: any[], container: HTMLElement) {
			if (currentlyReading.length > 0) {
				container.innerHTML = `
					<div class="flex gap-4 overflow-x-auto pb-4">
						${currentlyReading.map((readingState: any) => `
							<div class="relative group flex-shrink-0">
								<div class="w-24 h-32 bg-gray-100 rounded shadow-sm overflow-hidden">
									${readingState.book.cover
										? `<img src="${readingState.book.cover}" alt="${readingState.book.title}" class="w-full h-full object-cover" />`
										: '<div class="w-full h-full flex items-center justify-center text-gray-400">ðŸ“–</div>'
									}
								</div>
								<div class="absolute inset-0 bg-black bg-opacity-75 opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded flex flex-col justify-center items-center p-2 text-center">
									<h3 class="text-white text-xs font-medium mb-1 line-clamp-2">${readingState.book.title}</h3>
									<p class="text-gray-300 text-xs line-clamp-1">by ${readingState.book.authors.map((author: any) => author.name).join(', ')}</p>
								</div>
							</div>
						`).join('')}
					</div>
				`;
			} else {
				container.innerHTML = `
					<div class="text-center py-8">
						<p class="text-gray-500">No books currently being read.</p>
					</div>
				`;
			}
		}

		async function loadCurrentlyReading() {
			const container = document.getElementById('currently-reading-container');
			if (!container) return;

			try {
				// Try to load from localStorage first
				const cached = localStorage.getItem(CACHE_KEY);
				if (cached) {
					const { data, timestamp } = JSON.parse(cached);
					const age = Date.now() - timestamp;

					if (age < CACHE_DURATION) {
						console.log('Using cached books data');
						renderBooks(data, container);
						return;
					}
				}

				// Fetch fresh data
				console.log('Fetching fresh books data...');
				const response = await fetch('/api/books?type=currently-reading');
				if (!response.ok) {
					throw new Error('Failed to fetch books');
				}

				let responseData = await response.json();

				// Handle both array and object response formats
				const currentlyReading = Array.isArray(responseData)
					? responseData
					: (responseData.currentlyReading || []);

				// Cache the data
				localStorage.setItem(CACHE_KEY, JSON.stringify({
					data: currentlyReading,
					timestamp: Date.now()
				}));

				renderBooks(currentlyReading, container);
			} catch (error) {
				console.error('Error loading books:', error);

				// Try to use stale cache as fallback
				const cached = localStorage.getItem(CACHE_KEY);
				if (cached) {
					const { data } = JSON.parse(cached);
					console.log('Using stale cache as fallback');
					renderBooks(data, container);
				} else {
					container.innerHTML = `
						<div class="text-center py-8">
							<p class="text-gray-500">Failed to load books. Please check your configuration.</p>
						</div>
					`;
				}
			}
		}

		// Load books when page is ready
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', loadCurrentlyReading);
		} else {
			loadCurrentlyReading();
		}
	</script>

	<style>
		.line-clamp-1 {
			overflow: hidden;
			display: -webkit-box;
			-webkit-box-orient: vertical;
			-webkit-line-clamp: 1;
		}

		.line-clamp-2 {
			overflow: hidden;
			display: -webkit-box;
			-webkit-box-orient: vertical;
			-webkit-line-clamp: 2;
		}
	</style>


</Layout>
